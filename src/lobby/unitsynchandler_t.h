// DO NOT EDIT: THIS FILE WAS GENERATED by unitsync wrapper generator
// from unitsynchandler_t.h.template. Edit that file instead.
#ifndef _UNITSYNC_HANDLER_T_H
#define _UNITSYNC_HANDLER_T_H

#include "logger.h"
#include <string>
#include <exception>
#include <queue>
#include <boost/filesystem.hpp>
#include <boost/thread.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/thread/condition_variable.hpp>
#include <QObject>

class MapInfo;
class UnitsyncHandlerAsync : public QObject {
    Q_OBJECT
public:
    UnitsyncHandlerAsync(QObject* parent, Logger&, boost::filesystem::path dllpath);
    ~UnitsyncHandlerAsync();
    bool startThread();

    UnitsyncHandlerAsync(const UnitsyncHandlerAsync&) = delete;
    UnitsyncHandlerAsync& operator=(const UnitsyncHandlerAsync&) = delete;
    UnitsyncHandlerAsync(UnitsyncHandlerAsync&&);

    // Event used when unitsync wants to send a function result to js.
    struct ResultEvent : QEvent {
        ResultEvent(const std::string& id, const std::string& type, const std::string& res) : QEvent(QEvent::Type(TypeId)),
            id(id), type(type), res(res) {}
        std::string id, type, res;
        static const int TypeId = QEvent::User + 5; // maybe magic numbers aren't the answer...
    };

    struct bad_fptr : public std::exception {
        bad_fptr(std::string symbol) {
            m_what = "Symbol " + symbol + " not found in the unitsync library.";
        }
        const char* what() const noexcept { return m_what.c_str(); }
        std::string m_what;
    };

public slots:

    void jsReadFileVFS(QString, int fd, int size);

    // Unitsync functions.

    void getNextError(QString);
    void getSpringVersion(QString);
    void getSpringVersionPatchset(QString);
    void isSpringReleaseVersion(QString);
    void init(QString, bool, int);
    void unInit(QString);
    void getWritableDataDirectory(QString);
    void getDataDirectoryCount(QString);
    void getDataDirectory(QString, int);
    void processUnits(QString);
    void getUnitCount(QString);
    void getUnitName(QString, int);
    void getFullUnitName(QString, int);
    void addArchive(QString, QString);
    void addAllArchives(QString, QString);
    void removeAllArchives(QString);
    void getArchiveChecksum(QString, QString);
    void getArchivePath(QString, QString);
    void getMapCount(QString);
    void getMapName(QString, int);
    void getMapFileName(QString, int);
    void getMapDescription(QString, int);
    void getMapAuthor(QString, int);
    void getMapWidth(QString, int);
    void getMapHeight(QString, int);
    void getMapTidalStrength(QString, int);
    void getMapWindMin(QString, int);
    void getMapWindMax(QString, int);
    void getMapGravity(QString, int);
    void getMapResourceCount(QString, int);
    void getMapResourceName(QString, int, int);
    void getMapResourceMax(QString, int, int);
    void getMapResourceExtractorRadius(QString, int, int);
    void getMapPosCount(QString, int);
    void getMapPosX(QString, int, int);
    void getMapPosZ(QString, int, int);
    void getMapMinHeight(QString, QString);
    void getMapMaxHeight(QString, QString);
    void getMapArchiveCount(QString, QString);
    void getMapArchiveName(QString, int);
    void getMapChecksum(QString, int);
    void getMapChecksumFromName(QString, QString);
    void getSkirmishAICount(QString);
    void getSkirmishAIInfoCount(QString, int);
    void getInfoKey(QString, int);
    void getInfoType(QString, int);
    void getInfoValueString(QString, int);
    void getInfoValueInteger(QString, int);
    void getInfoValueFloat(QString, int);
    void getInfoValueBool(QString, int);
    void getInfoDescription(QString, int);
    void getSkirmishAIOptionCount(QString, int);
    void getPrimaryModCount(QString);
    void getPrimaryModInfoCount(QString, int);
    void getPrimaryModArchive(QString, int);
    void getPrimaryModArchiveCount(QString, int);
    void getPrimaryModArchiveList(QString, int);
    void getPrimaryModIndex(QString, QString);
    void getPrimaryModChecksum(QString, int);
    void getPrimaryModChecksumFromName(QString, QString);
    void getSideCount(QString);
    void getSideName(QString, int);
    void getSideStartUnit(QString, int);
    void getMapOptionCount(QString, QString);
    void getModOptionCount(QString);
    void getCustomOptionCount(QString, QString);
    void getOptionKey(QString, int);
    void getOptionScope(QString, int);
    void getOptionName(QString, int);
    void getOptionSection(QString, int);
    void getOptionStyle(QString, int);
    void getOptionDesc(QString, int);
    void getOptionType(QString, int);
    void getOptionBoolDef(QString, int);
    void getOptionNumberDef(QString, int);
    void getOptionNumberMin(QString, int);
    void getOptionNumberMax(QString, int);
    void getOptionNumberStep(QString, int);
    void getOptionStringDef(QString, int);
    void getOptionStringMaxLen(QString, int);
    void getOptionListCount(QString, int);
    void getOptionListDef(QString, int);
    void getOptionListItemKey(QString, int, int);
    void getOptionListItemName(QString, int, int);
    void getOptionListItemDesc(QString, int, int);
    void getModValidMapCount(QString);
    void getModValidMap(QString, int);
    void openFileVFS(QString, QString);
    void closeFileVFS(QString, int);
    void fileSizeVFS(QString, int);
    void initFindVFS(QString, QString);
    void initDirListVFS(QString, QString, QString, QString);
    void initSubDirsVFS(QString, QString, QString, QString);
    void openArchive(QString, QString);
    void closeArchive(QString, int);
    void openArchiveFile(QString, int, QString);
    void closeArchiveFile(QString, int, int);
    void sizeArchiveFile(QString, int, int);
    void setSpringConfigFile(QString, QString);
    void getSpringConfigFile(QString);
    void getSpringConfigString(QString, QString, QString);
    void getSpringConfigInt(QString, QString, int);
    void getSpringConfigFloat(QString, QString, float);
    void setSpringConfigString(QString, QString, QString);
    void setSpringConfigInt(QString, QString, int);
    void setSpringConfigFloat(QString, QString, float);
    void deleteSpringConfigKey(QString, QString);
    void lpClose(QString);
    void lpOpenFile(QString, QString, QString, QString);
    void lpOpenSource(QString, QString, QString);
    void lpExecute(QString);
    void lpErrorLog(QString);
    void lpAddTableInt(QString, int, int);
    void lpAddTableStr(QString, QString, int);
    void lpEndTable(QString);
    void lpAddIntKeyIntVal(QString, int, int);
    void lpAddStrKeyIntVal(QString, QString, int);
    void lpAddIntKeyBoolVal(QString, int, int);
    void lpAddStrKeyBoolVal(QString, QString, int);
    void lpAddIntKeyFloatVal(QString, int, float);
    void lpAddStrKeyFloatVal(QString, QString, float);
    void lpAddIntKeyStrVal(QString, int, QString);
    void lpAddStrKeyStrVal(QString, QString, QString);
    void lpRootTable(QString);
    void lpRootTableExpr(QString, QString);
    void lpSubTableInt(QString, int);
    void lpSubTableStr(QString, QString);
    void lpSubTableExpr(QString, QString);
    void lpPopTable(QString);
    void lpGetKeyExistsInt(QString, int);
    void lpGetKeyExistsStr(QString, QString);
    void lpGetIntKeyType(QString, int);
    void lpGetStrKeyType(QString, QString);
    void lpGetIntKeyListCount(QString);
    void lpGetIntKeyListEntry(QString, int);
    void lpGetStrKeyListCount(QString);
    void lpGetStrKeyListEntry(QString, int);
    void lpGetIntKeyIntVal(QString, int, int);
    void lpGetStrKeyIntVal(QString, QString, int);
    void lpGetIntKeyBoolVal(QString, int, int);
    void lpGetStrKeyBoolVal(QString, QString, int);
    void lpGetIntKeyFloatVal(QString, int, float);
    void lpGetStrKeyFloatVal(QString, QString, float);
    void lpGetIntKeyStrVal(QString, int, QString);
    void lpGetStrKeyStrVal(QString, QString, QString);
    void processUnitsNoChecksum(QString);
    void getInfoValue(QString, int);
    void getPrimaryModName(QString, int);
    void getPrimaryModShortName(QString, int);
    void getPrimaryModVersion(QString, int);
    void getPrimaryModMutator(QString, int);
    void getPrimaryModGame(QString, int);
    void getPrimaryModShortGame(QString, int);
    void getPrimaryModDescription(QString, int);
    void openArchiveType(QString, QString, QString);

private:
    Logger& logger;
    bool ready;
    void* handle;

    boost::thread workThread;
    std::queue<std::function<void()>> queue;
    // This mutex blocks queue execution across all instances
    // of UnitsyncHandlerAsync.
    static boost::mutex executionMutex;
    boost::mutex queueMutex; // queue and ready access
    boost::condition_variable queueCond;

    std::string cstrNull(const char*);

    // Unisync function pointers.

    typedef const char* (*fptr_type_GetNextError)();
    fptr_type_GetNextError fptr_GetNextError;
    typedef const char* (*fptr_type_GetSpringVersion)();
    fptr_type_GetSpringVersion fptr_GetSpringVersion;
    typedef const char* (*fptr_type_GetSpringVersionPatchset)();
    fptr_type_GetSpringVersionPatchset fptr_GetSpringVersionPatchset;
    typedef bool (*fptr_type_IsSpringReleaseVersion)();
    fptr_type_IsSpringReleaseVersion fptr_IsSpringReleaseVersion;
    typedef int (*fptr_type_Init)(bool, int);
    fptr_type_Init fptr_Init;
    typedef void (*fptr_type_UnInit)();
    fptr_type_UnInit fptr_UnInit;
    typedef const char* (*fptr_type_GetWritableDataDirectory)();
    fptr_type_GetWritableDataDirectory fptr_GetWritableDataDirectory;
    typedef int (*fptr_type_GetDataDirectoryCount)();
    fptr_type_GetDataDirectoryCount fptr_GetDataDirectoryCount;
    typedef const char* (*fptr_type_GetDataDirectory)(int);
    fptr_type_GetDataDirectory fptr_GetDataDirectory;
    typedef int (*fptr_type_ProcessUnits)();
    fptr_type_ProcessUnits fptr_ProcessUnits;
    typedef int (*fptr_type_GetUnitCount)();
    fptr_type_GetUnitCount fptr_GetUnitCount;
    typedef const char* (*fptr_type_GetUnitName)(int);
    fptr_type_GetUnitName fptr_GetUnitName;
    typedef const char* (*fptr_type_GetFullUnitName)(int);
    fptr_type_GetFullUnitName fptr_GetFullUnitName;
    typedef void (*fptr_type_AddArchive)(const char*);
    fptr_type_AddArchive fptr_AddArchive;
    typedef void (*fptr_type_AddAllArchives)(const char*);
    fptr_type_AddAllArchives fptr_AddAllArchives;
    typedef void (*fptr_type_RemoveAllArchives)();
    fptr_type_RemoveAllArchives fptr_RemoveAllArchives;
    typedef unsigned int (*fptr_type_GetArchiveChecksum)(const char*);
    fptr_type_GetArchiveChecksum fptr_GetArchiveChecksum;
    typedef const char* (*fptr_type_GetArchivePath)(const char*);
    fptr_type_GetArchivePath fptr_GetArchivePath;
    typedef int (*fptr_type_GetMapCount)();
    fptr_type_GetMapCount fptr_GetMapCount;
    typedef const char* (*fptr_type_GetMapName)(int);
    fptr_type_GetMapName fptr_GetMapName;
    typedef const char* (*fptr_type_GetMapFileName)(int);
    fptr_type_GetMapFileName fptr_GetMapFileName;
    typedef const char* (*fptr_type_GetMapDescription)(int);
    fptr_type_GetMapDescription fptr_GetMapDescription;
    typedef const char* (*fptr_type_GetMapAuthor)(int);
    fptr_type_GetMapAuthor fptr_GetMapAuthor;
    typedef int (*fptr_type_GetMapWidth)(int);
    fptr_type_GetMapWidth fptr_GetMapWidth;
    typedef int (*fptr_type_GetMapHeight)(int);
    fptr_type_GetMapHeight fptr_GetMapHeight;
    typedef int (*fptr_type_GetMapTidalStrength)(int);
    fptr_type_GetMapTidalStrength fptr_GetMapTidalStrength;
    typedef int (*fptr_type_GetMapWindMin)(int);
    fptr_type_GetMapWindMin fptr_GetMapWindMin;
    typedef int (*fptr_type_GetMapWindMax)(int);
    fptr_type_GetMapWindMax fptr_GetMapWindMax;
    typedef int (*fptr_type_GetMapGravity)(int);
    fptr_type_GetMapGravity fptr_GetMapGravity;
    typedef int (*fptr_type_GetMapResourceCount)(int);
    fptr_type_GetMapResourceCount fptr_GetMapResourceCount;
    typedef const char* (*fptr_type_GetMapResourceName)(int, int);
    fptr_type_GetMapResourceName fptr_GetMapResourceName;
    typedef float (*fptr_type_GetMapResourceMax)(int, int);
    fptr_type_GetMapResourceMax fptr_GetMapResourceMax;
    typedef int (*fptr_type_GetMapResourceExtractorRadius)(int, int);
    fptr_type_GetMapResourceExtractorRadius fptr_GetMapResourceExtractorRadius;
    typedef int (*fptr_type_GetMapPosCount)(int);
    fptr_type_GetMapPosCount fptr_GetMapPosCount;
    typedef float (*fptr_type_GetMapPosX)(int, int);
    fptr_type_GetMapPosX fptr_GetMapPosX;
    typedef float (*fptr_type_GetMapPosZ)(int, int);
    fptr_type_GetMapPosZ fptr_GetMapPosZ;
    typedef float (*fptr_type_GetMapMinHeight)(const char*);
    fptr_type_GetMapMinHeight fptr_GetMapMinHeight;
    typedef float (*fptr_type_GetMapMaxHeight)(const char*);
    fptr_type_GetMapMaxHeight fptr_GetMapMaxHeight;
    typedef int (*fptr_type_GetMapArchiveCount)(const char*);
    fptr_type_GetMapArchiveCount fptr_GetMapArchiveCount;
    typedef const char* (*fptr_type_GetMapArchiveName)(int);
    fptr_type_GetMapArchiveName fptr_GetMapArchiveName;
    typedef unsigned int (*fptr_type_GetMapChecksum)(int);
    fptr_type_GetMapChecksum fptr_GetMapChecksum;
    typedef unsigned int (*fptr_type_GetMapChecksumFromName)(const char*);
    fptr_type_GetMapChecksumFromName fptr_GetMapChecksumFromName;
    typedef unsigned short* (*fptr_type_GetMinimap)(const char*, int);
    fptr_type_GetMinimap fptr_GetMinimap;
    typedef int (*fptr_type_GetInfoMapSize)(const char*, const char*, int*, int*);
    fptr_type_GetInfoMapSize fptr_GetInfoMapSize;
    typedef int (*fptr_type_GetInfoMap)(const char*, const char*, unsigned char*, int);
    fptr_type_GetInfoMap fptr_GetInfoMap;
    typedef int (*fptr_type_GetSkirmishAICount)();
    fptr_type_GetSkirmishAICount fptr_GetSkirmishAICount;
    typedef int (*fptr_type_GetSkirmishAIInfoCount)(int);
    fptr_type_GetSkirmishAIInfoCount fptr_GetSkirmishAIInfoCount;
    typedef const char* (*fptr_type_GetInfoKey)(int);
    fptr_type_GetInfoKey fptr_GetInfoKey;
    typedef const char* (*fptr_type_GetInfoType)(int);
    fptr_type_GetInfoType fptr_GetInfoType;
    typedef const char* (*fptr_type_GetInfoValueString)(int);
    fptr_type_GetInfoValueString fptr_GetInfoValueString;
    typedef int (*fptr_type_GetInfoValueInteger)(int);
    fptr_type_GetInfoValueInteger fptr_GetInfoValueInteger;
    typedef float (*fptr_type_GetInfoValueFloat)(int);
    fptr_type_GetInfoValueFloat fptr_GetInfoValueFloat;
    typedef bool (*fptr_type_GetInfoValueBool)(int);
    fptr_type_GetInfoValueBool fptr_GetInfoValueBool;
    typedef const char* (*fptr_type_GetInfoDescription)(int);
    fptr_type_GetInfoDescription fptr_GetInfoDescription;
    typedef int (*fptr_type_GetSkirmishAIOptionCount)(int);
    fptr_type_GetSkirmishAIOptionCount fptr_GetSkirmishAIOptionCount;
    typedef int (*fptr_type_GetPrimaryModCount)();
    fptr_type_GetPrimaryModCount fptr_GetPrimaryModCount;
    typedef int (*fptr_type_GetPrimaryModInfoCount)(int);
    fptr_type_GetPrimaryModInfoCount fptr_GetPrimaryModInfoCount;
    typedef const char* (*fptr_type_GetPrimaryModArchive)(int);
    fptr_type_GetPrimaryModArchive fptr_GetPrimaryModArchive;
    typedef int (*fptr_type_GetPrimaryModArchiveCount)(int);
    fptr_type_GetPrimaryModArchiveCount fptr_GetPrimaryModArchiveCount;
    typedef const char* (*fptr_type_GetPrimaryModArchiveList)(int);
    fptr_type_GetPrimaryModArchiveList fptr_GetPrimaryModArchiveList;
    typedef int (*fptr_type_GetPrimaryModIndex)(const char*);
    fptr_type_GetPrimaryModIndex fptr_GetPrimaryModIndex;
    typedef unsigned int (*fptr_type_GetPrimaryModChecksum)(int);
    fptr_type_GetPrimaryModChecksum fptr_GetPrimaryModChecksum;
    typedef unsigned int (*fptr_type_GetPrimaryModChecksumFromName)(const char*);
    fptr_type_GetPrimaryModChecksumFromName fptr_GetPrimaryModChecksumFromName;
    typedef int (*fptr_type_GetSideCount)();
    fptr_type_GetSideCount fptr_GetSideCount;
    typedef const char* (*fptr_type_GetSideName)(int);
    fptr_type_GetSideName fptr_GetSideName;
    typedef const char* (*fptr_type_GetSideStartUnit)(int);
    fptr_type_GetSideStartUnit fptr_GetSideStartUnit;
    typedef int (*fptr_type_GetMapOptionCount)(const char*);
    fptr_type_GetMapOptionCount fptr_GetMapOptionCount;
    typedef int (*fptr_type_GetModOptionCount)();
    fptr_type_GetModOptionCount fptr_GetModOptionCount;
    typedef int (*fptr_type_GetCustomOptionCount)(const char*);
    fptr_type_GetCustomOptionCount fptr_GetCustomOptionCount;
    typedef const char* (*fptr_type_GetOptionKey)(int);
    fptr_type_GetOptionKey fptr_GetOptionKey;
    typedef const char* (*fptr_type_GetOptionScope)(int);
    fptr_type_GetOptionScope fptr_GetOptionScope;
    typedef const char* (*fptr_type_GetOptionName)(int);
    fptr_type_GetOptionName fptr_GetOptionName;
    typedef const char* (*fptr_type_GetOptionSection)(int);
    fptr_type_GetOptionSection fptr_GetOptionSection;
    typedef const char* (*fptr_type_GetOptionStyle)(int);
    fptr_type_GetOptionStyle fptr_GetOptionStyle;
    typedef const char* (*fptr_type_GetOptionDesc)(int);
    fptr_type_GetOptionDesc fptr_GetOptionDesc;
    typedef int (*fptr_type_GetOptionType)(int);
    fptr_type_GetOptionType fptr_GetOptionType;
    typedef int (*fptr_type_GetOptionBoolDef)(int);
    fptr_type_GetOptionBoolDef fptr_GetOptionBoolDef;
    typedef float (*fptr_type_GetOptionNumberDef)(int);
    fptr_type_GetOptionNumberDef fptr_GetOptionNumberDef;
    typedef float (*fptr_type_GetOptionNumberMin)(int);
    fptr_type_GetOptionNumberMin fptr_GetOptionNumberMin;
    typedef float (*fptr_type_GetOptionNumberMax)(int);
    fptr_type_GetOptionNumberMax fptr_GetOptionNumberMax;
    typedef float (*fptr_type_GetOptionNumberStep)(int);
    fptr_type_GetOptionNumberStep fptr_GetOptionNumberStep;
    typedef const char* (*fptr_type_GetOptionStringDef)(int);
    fptr_type_GetOptionStringDef fptr_GetOptionStringDef;
    typedef int (*fptr_type_GetOptionStringMaxLen)(int);
    fptr_type_GetOptionStringMaxLen fptr_GetOptionStringMaxLen;
    typedef int (*fptr_type_GetOptionListCount)(int);
    fptr_type_GetOptionListCount fptr_GetOptionListCount;
    typedef const char* (*fptr_type_GetOptionListDef)(int);
    fptr_type_GetOptionListDef fptr_GetOptionListDef;
    typedef const char* (*fptr_type_GetOptionListItemKey)(int, int);
    fptr_type_GetOptionListItemKey fptr_GetOptionListItemKey;
    typedef const char* (*fptr_type_GetOptionListItemName)(int, int);
    fptr_type_GetOptionListItemName fptr_GetOptionListItemName;
    typedef const char* (*fptr_type_GetOptionListItemDesc)(int, int);
    fptr_type_GetOptionListItemDesc fptr_GetOptionListItemDesc;
    typedef int (*fptr_type_GetModValidMapCount)();
    fptr_type_GetModValidMapCount fptr_GetModValidMapCount;
    typedef const char* (*fptr_type_GetModValidMap)(int);
    fptr_type_GetModValidMap fptr_GetModValidMap;
    typedef int (*fptr_type_OpenFileVFS)(const char*);
    fptr_type_OpenFileVFS fptr_OpenFileVFS;
    typedef void (*fptr_type_CloseFileVFS)(int);
    fptr_type_CloseFileVFS fptr_CloseFileVFS;
    typedef int (*fptr_type_ReadFileVFS)(int, unsigned char*, int);
    fptr_type_ReadFileVFS fptr_ReadFileVFS;
    typedef int (*fptr_type_FileSizeVFS)(int);
    fptr_type_FileSizeVFS fptr_FileSizeVFS;
    typedef int (*fptr_type_InitFindVFS)(const char*);
    fptr_type_InitFindVFS fptr_InitFindVFS;
    typedef int (*fptr_type_InitDirListVFS)(const char*, const char*, const char*);
    fptr_type_InitDirListVFS fptr_InitDirListVFS;
    typedef int (*fptr_type_InitSubDirsVFS)(const char*, const char*, const char*);
    fptr_type_InitSubDirsVFS fptr_InitSubDirsVFS;
    typedef int (*fptr_type_FindFilesVFS)(int, char*, int);
    fptr_type_FindFilesVFS fptr_FindFilesVFS;
    typedef int (*fptr_type_OpenArchive)(const char*);
    fptr_type_OpenArchive fptr_OpenArchive;
    typedef void (*fptr_type_CloseArchive)(int);
    fptr_type_CloseArchive fptr_CloseArchive;
    typedef int (*fptr_type_FindFilesArchive)(int, int, char*, int*);
    fptr_type_FindFilesArchive fptr_FindFilesArchive;
    typedef int (*fptr_type_OpenArchiveFile)(int, const char*);
    fptr_type_OpenArchiveFile fptr_OpenArchiveFile;
    typedef int (*fptr_type_ReadArchiveFile)(int, int, unsigned char*, int);
    fptr_type_ReadArchiveFile fptr_ReadArchiveFile;
    typedef void (*fptr_type_CloseArchiveFile)(int, int);
    fptr_type_CloseArchiveFile fptr_CloseArchiveFile;
    typedef int (*fptr_type_SizeArchiveFile)(int, int);
    fptr_type_SizeArchiveFile fptr_SizeArchiveFile;
    typedef void (*fptr_type_SetSpringConfigFile)(const char*);
    fptr_type_SetSpringConfigFile fptr_SetSpringConfigFile;
    typedef const char* (*fptr_type_GetSpringConfigFile)();
    fptr_type_GetSpringConfigFile fptr_GetSpringConfigFile;
    typedef const char* (*fptr_type_GetSpringConfigString)(const char*, const char*);
    fptr_type_GetSpringConfigString fptr_GetSpringConfigString;
    typedef int (*fptr_type_GetSpringConfigInt)(const char*, int);
    fptr_type_GetSpringConfigInt fptr_GetSpringConfigInt;
    typedef float (*fptr_type_GetSpringConfigFloat)(const char*, float);
    fptr_type_GetSpringConfigFloat fptr_GetSpringConfigFloat;
    typedef void (*fptr_type_SetSpringConfigString)(const char*, const char*);
    fptr_type_SetSpringConfigString fptr_SetSpringConfigString;
    typedef void (*fptr_type_SetSpringConfigInt)(const char*, int);
    fptr_type_SetSpringConfigInt fptr_SetSpringConfigInt;
    typedef void (*fptr_type_SetSpringConfigFloat)(const char*, float);
    fptr_type_SetSpringConfigFloat fptr_SetSpringConfigFloat;
    typedef void (*fptr_type_DeleteSpringConfigKey)(const char*);
    fptr_type_DeleteSpringConfigKey fptr_DeleteSpringConfigKey;
    typedef void (*fptr_type_lpClose)();
    fptr_type_lpClose fptr_lpClose;
    typedef int (*fptr_type_lpOpenFile)(const char*, const char*, const char*);
    fptr_type_lpOpenFile fptr_lpOpenFile;
    typedef int (*fptr_type_lpOpenSource)(const char*, const char*);
    fptr_type_lpOpenSource fptr_lpOpenSource;
    typedef int (*fptr_type_lpExecute)();
    fptr_type_lpExecute fptr_lpExecute;
    typedef const char* (*fptr_type_lpErrorLog)();
    fptr_type_lpErrorLog fptr_lpErrorLog;
    typedef void (*fptr_type_lpAddTableInt)(int, int);
    fptr_type_lpAddTableInt fptr_lpAddTableInt;
    typedef void (*fptr_type_lpAddTableStr)(const char*, int);
    fptr_type_lpAddTableStr fptr_lpAddTableStr;
    typedef void (*fptr_type_lpEndTable)();
    fptr_type_lpEndTable fptr_lpEndTable;
    typedef void (*fptr_type_lpAddIntKeyIntVal)(int, int);
    fptr_type_lpAddIntKeyIntVal fptr_lpAddIntKeyIntVal;
    typedef void (*fptr_type_lpAddStrKeyIntVal)(const char*, int);
    fptr_type_lpAddStrKeyIntVal fptr_lpAddStrKeyIntVal;
    typedef void (*fptr_type_lpAddIntKeyBoolVal)(int, int);
    fptr_type_lpAddIntKeyBoolVal fptr_lpAddIntKeyBoolVal;
    typedef void (*fptr_type_lpAddStrKeyBoolVal)(const char*, int);
    fptr_type_lpAddStrKeyBoolVal fptr_lpAddStrKeyBoolVal;
    typedef void (*fptr_type_lpAddIntKeyFloatVal)(int, float);
    fptr_type_lpAddIntKeyFloatVal fptr_lpAddIntKeyFloatVal;
    typedef void (*fptr_type_lpAddStrKeyFloatVal)(const char*, float);
    fptr_type_lpAddStrKeyFloatVal fptr_lpAddStrKeyFloatVal;
    typedef void (*fptr_type_lpAddIntKeyStrVal)(int, const char*);
    fptr_type_lpAddIntKeyStrVal fptr_lpAddIntKeyStrVal;
    typedef void (*fptr_type_lpAddStrKeyStrVal)(const char*, const char*);
    fptr_type_lpAddStrKeyStrVal fptr_lpAddStrKeyStrVal;
    typedef int (*fptr_type_lpRootTable)();
    fptr_type_lpRootTable fptr_lpRootTable;
    typedef int (*fptr_type_lpRootTableExpr)(const char*);
    fptr_type_lpRootTableExpr fptr_lpRootTableExpr;
    typedef int (*fptr_type_lpSubTableInt)(int);
    fptr_type_lpSubTableInt fptr_lpSubTableInt;
    typedef int (*fptr_type_lpSubTableStr)(const char*);
    fptr_type_lpSubTableStr fptr_lpSubTableStr;
    typedef int (*fptr_type_lpSubTableExpr)(const char*);
    fptr_type_lpSubTableExpr fptr_lpSubTableExpr;
    typedef void (*fptr_type_lpPopTable)();
    fptr_type_lpPopTable fptr_lpPopTable;
    typedef int (*fptr_type_lpGetKeyExistsInt)(int);
    fptr_type_lpGetKeyExistsInt fptr_lpGetKeyExistsInt;
    typedef int (*fptr_type_lpGetKeyExistsStr)(const char*);
    fptr_type_lpGetKeyExistsStr fptr_lpGetKeyExistsStr;
    typedef int (*fptr_type_lpGetIntKeyType)(int);
    fptr_type_lpGetIntKeyType fptr_lpGetIntKeyType;
    typedef int (*fptr_type_lpGetStrKeyType)(const char*);
    fptr_type_lpGetStrKeyType fptr_lpGetStrKeyType;
    typedef int (*fptr_type_lpGetIntKeyListCount)();
    fptr_type_lpGetIntKeyListCount fptr_lpGetIntKeyListCount;
    typedef int (*fptr_type_lpGetIntKeyListEntry)(int);
    fptr_type_lpGetIntKeyListEntry fptr_lpGetIntKeyListEntry;
    typedef int (*fptr_type_lpGetStrKeyListCount)();
    fptr_type_lpGetStrKeyListCount fptr_lpGetStrKeyListCount;
    typedef const char* (*fptr_type_lpGetStrKeyListEntry)(int);
    fptr_type_lpGetStrKeyListEntry fptr_lpGetStrKeyListEntry;
    typedef int (*fptr_type_lpGetIntKeyIntVal)(int, int);
    fptr_type_lpGetIntKeyIntVal fptr_lpGetIntKeyIntVal;
    typedef int (*fptr_type_lpGetStrKeyIntVal)(const char*, int);
    fptr_type_lpGetStrKeyIntVal fptr_lpGetStrKeyIntVal;
    typedef int (*fptr_type_lpGetIntKeyBoolVal)(int, int);
    fptr_type_lpGetIntKeyBoolVal fptr_lpGetIntKeyBoolVal;
    typedef int (*fptr_type_lpGetStrKeyBoolVal)(const char*, int);
    fptr_type_lpGetStrKeyBoolVal fptr_lpGetStrKeyBoolVal;
    typedef float (*fptr_type_lpGetIntKeyFloatVal)(int, float);
    fptr_type_lpGetIntKeyFloatVal fptr_lpGetIntKeyFloatVal;
    typedef float (*fptr_type_lpGetStrKeyFloatVal)(const char*, float);
    fptr_type_lpGetStrKeyFloatVal fptr_lpGetStrKeyFloatVal;
    typedef const char* (*fptr_type_lpGetIntKeyStrVal)(int, const char*);
    fptr_type_lpGetIntKeyStrVal fptr_lpGetIntKeyStrVal;
    typedef const char* (*fptr_type_lpGetStrKeyStrVal)(const char*, const char*);
    fptr_type_lpGetStrKeyStrVal fptr_lpGetStrKeyStrVal;
    typedef int (*fptr_type_ProcessUnitsNoChecksum)();
    fptr_type_ProcessUnitsNoChecksum fptr_ProcessUnitsNoChecksum;
    typedef int (*fptr_type_GetMapInfoEx)(const char*, MapInfo*, int);
    fptr_type_GetMapInfoEx fptr_GetMapInfoEx;
    typedef int (*fptr_type_GetMapInfo)(const char*, MapInfo*);
    fptr_type_GetMapInfo fptr_GetMapInfo;
    typedef const char* (*fptr_type_GetInfoValue)(int);
    fptr_type_GetInfoValue fptr_GetInfoValue;
    typedef const char* (*fptr_type_GetPrimaryModName)(int);
    fptr_type_GetPrimaryModName fptr_GetPrimaryModName;
    typedef const char* (*fptr_type_GetPrimaryModShortName)(int);
    fptr_type_GetPrimaryModShortName fptr_GetPrimaryModShortName;
    typedef const char* (*fptr_type_GetPrimaryModVersion)(int);
    fptr_type_GetPrimaryModVersion fptr_GetPrimaryModVersion;
    typedef const char* (*fptr_type_GetPrimaryModMutator)(int);
    fptr_type_GetPrimaryModMutator fptr_GetPrimaryModMutator;
    typedef const char* (*fptr_type_GetPrimaryModGame)(int);
    fptr_type_GetPrimaryModGame fptr_GetPrimaryModGame;
    typedef const char* (*fptr_type_GetPrimaryModShortGame)(int);
    fptr_type_GetPrimaryModShortGame fptr_GetPrimaryModShortGame;
    typedef const char* (*fptr_type_GetPrimaryModDescription)(int);
    fptr_type_GetPrimaryModDescription fptr_GetPrimaryModDescription;
    typedef int (*fptr_type_OpenArchiveType)(const char*, const char*);
    fptr_type_OpenArchiveType fptr_OpenArchiveType;
};

#endif // _UNITSYNC_HANDLER_T_H
